<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[在线视频播放心得]]></title>
    <url>%2Fp%2F2e80.html</url>
    <content type="text"><![CDATA[最近公司准备上一套视频播放的项目，对此我很兴奋，视频播放一直是技术中比较热门板块，并且又是一个比较老的板块。想要一个视频可以成功在网页中播放，我从一个懵逼状态到到真的实现播放总结了如下几个步骤。上传正常情况需要有一段可以播放的视频，视频格式其实无所谓， .mp4 .avi 都可以，一般保证在上传的时候保证第一手视频是非常清晰的原视频。但是如果视频太大的话就是上传的时候会慢点。由于七牛的各项费用我觉得都还不是特步贵，所以依然选择了七牛。这里涉及的其实是七牛的对象存储，七牛对于上传提供两种方式表单上传和分片上传，如果上传的资源文件小于 1gb，前者就行了，如果要使用分片上传最好是使用七牛的 sdk 了。这里我上传资源时后端接口返回到前端一个 token 和 key ，前端直接用 form 上传到七牛就行。转码这块其实是我研究很久的一块，视频为什么需要转码？这个问题不太好回答，那么接着问自己，什么是视频？如果我说视频是一张张连续播放的带着背景音乐的图片可能很多人也不会反对。那肯定会有这样的问题， 什么是图片？，图片又是一个很有意思的话题，如果以后专门有研究再开篇说图片，计算机世界里面这些视频和图片都是一堆有组织有预谋有规律的文件，前期按照一定的规则进行编码存储，后期按一定的编码打开，其实这里面还少一个阶段那就是现在的互联网时代，还会产生一个从服务端到客户端按一定编码进行传输。百度百科-视频编码 洋洋洒洒几千字，反正最终胜出者是 H.264，这是一个非常了不起的编码标准，它是集编码效率高，占用空间小，清晰度高等多个特性与一身，所以现在世面上大多数视频都是采用了这个标准。目前有个最新编码是 H.265，貌似又是一个非常厉害的编码格式有一统视频编码的趋势，但是由于并非所有浏览器都兼容，所以不得已选择了更为稳健的 H.264，如果时间充裕，后期可以考虑上多个源，前端自由搭配。其实转码就是将原视频先解码再编码成合适的视频源，七牛和又拍云上一直提示转码的功能，我开始很懵逼，难道一定需要用他们自家的转码转的视频才能在网页上播放吗，转码到底是为播放准备些什么，不过写到这里问题肯定都是迎刃而解了。公司目前有人负责视频上传，对上传者有转码的培训和要求，所以转码可以在上传前就完成，但是如果播放的时候需要选择多个视频源，要求高清、2k、4k，这时候本地转码就显得效率低下了，使用云转码显然要便捷太多。顺便普及一下视频清晰度，网络视频清晰和模糊会取决于多个因素，但是最重要的因为应该是网络带宽与速度、视频的编码以及视频的分辨率。网速暂且不论，编码无非是 H.264 和H.265，那最后的视频分辨率其实是代表视频画面的宽高，标准如下。分辨率别名宽高4K4K3840x21602K2K2560x1440FHD1080P、超清1920x1080HD720P、高清1280x720LD-960x540SD标准640x480分辨率越高视频细节就越丰富，需要传输的内容也就越多。切片通过上面转码后的视频原则上就已经可以支持播放了，但是为什么会有切片这个过程？是因为往往一个 50mb 的视频文件，需要下载完成后才能进行播放，那么下载的过程就让用户白白等待了，为了打破视频下载中不能播放的情况，m3u8 应运而生，简单点说就是对一个特别长的视频进行分块切片，切成一段一段的，最终生成一堆的 .ts 文件和一个 .m3u8 的目录文件，播放视频的时候，只需要接入 m3u8 的地址，播放的时候会自动检索需要下载的片段，这样就完美解决了边下边播的问题了。其实这里还想补充一个小插曲，就是放在七牛上的视频，不进行切片也是可以“分片播放”的，这个当时确实有点惊呆了，难道七牛自动给我切片了，还是什么原因，打开 chrome 的控制台，发现浏览器一直在发送 http 请求，返回的结果 http code 都是 206，追寻着这个足迹，又去研究了下什么是 206 请求，原来是七牛服务器做的断点续传，每次请求返回都是源文件的一个片段，客户端这边对这一个片段进行解码播放就 ok 了，我觉得这个也算一个伪切片的功能。播放使用 html5 的 video 标签就可以进行各种视频的播放了,或者 video.js 等其他播放器。如果用到视频加密，可以选择一些定制化视频播放器，视频加密后，通过特殊播放器解密。参考文档H.264和H.265对比H.265/HEVC在Web视频播放的实践分辨率与视频宽高Http 206 文件断点续传下载原理HTML5 video标签播放视频下载原理]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>视频播放</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于go并发的优越性]]></title>
    <url>%2Fp%2Faa7b.html</url>
    <content type="text"><![CDATA[这篇文章本来想好好解释一下 go 并发的优越性，但是看到一个博客讲的实在太好，例子解释的太过清楚，给作者点赞。以前觉得 nodejs 里面的并发是用 async/await 这种形式才是优雅，但是不足之处也很明显，太过于粗粒度控制并发了，go 的并发在手动控制上表现力更强。不过 go 里面的 if err !=nil 实在是忍受不了，最近在研究 rust ，上手有点难度🤣。参考用Promise实现并发 vs Go goroutine]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[git checkout 妙用]]></title>
    <url>%2Fp%2F4ba1.html</url>
    <content type="text"><![CDATA[git 上面创建一个分支是 git branch fix-target ，其实这个命令我还测试了一下，因为我已经忘了这个命令，一直使用的 git checkout -b fix-target。这个命令优秀之处在于会创建一个分支，并切换到这个分支，但是有时候 fix-target 如果已经存在这个命令就会出错，蠢笨的我已经操作了 git branch -D fix-target，然后git checkout -b fix-target 半年了。这里一定要注意我这里是强制删除，因为我已经确认我不需要旧分支上任何数据了，就想要个名。今天突然发现 git checkout -B fix-target，正是我所想要的。]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[七牛数据从一个桶转移到另一个桶]]></title>
    <url>%2Fp%2Ff6a9.html</url>
    <content type="text"><![CDATA[因为七牛临时域名的原因，一些老的数据连接都对不上，我们这边需要将一个 bucketA 到另外一个 bucketB 中。操作步骤如下下载并 qshell七牛官方下载页面下载可执行文件，因为我是 mac ，所以选择 qshell_darwin_x64，找个合适的路径，我的习惯是 $HOME/bin，配置好 PATH。设置 account1$ qshell account AK SK name新版本有个 name，老版本是没有的。有找个参数可以更好的作区分。列出 bucket123$ qshell listbucket bucketA -o srccopy.txtxx简历.png 500071 FuEnT1v7oou7--ahA5gO1VIy4EHY 15283671101562504 image/png 0将 bucket 中的所有文件信息导出，BUT，这里我对七牛这点不满意，应该有个参数可以配置可以输出哪些文件信息，一股脑所有信息都抛出来了，但是这里是用 \t 分割的，那么我们做个切分也就 ok 了。处理文件列表来喽！这里突发奇想，来个 lua 脚本。就是爱折腾12345678910111213141516171819 function split( str,reps ) local resultStrList = &#123;&#125; string.gsub(str,'[^'..reps..']+',function ( w ) table.insert(resultStrList,w) end) return resultStrListendsourceFile = io.open ("srccopy.txt","r");toFile = io.open("tocopy.txt" ,"w");y=1for line in sourceFile:lines() do arr=split(line,"\t") name=arr[1] toFile:write(name.."\n") y=y+1endsourceFile:close()toFile:close()copy bucket1$ qshell batchcopy --force --failure-list failure-list.txt bucketA bucketB -i tocopy.txt处理失败的我们可以记录下来，大部分是文件名已存在，我这里选择不覆盖，如果需要覆盖添加上 --overwrite 参数。总结这是第一次对 lua 的使用，感觉还挺轻量，以后还可以多使用 lua。参考qshelllua切割字符串lua读写文件]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git-stash的妙用]]></title>
    <url>%2Fp%2Fa56c.html</url>
    <content type="text"><![CDATA[今天一路 git stash drop，本地暂存的数据全被我删掉了，然后 sb 的发现，Dropped refs/stash@{0} (534cb702c00f36afd4297e6328557cabead9600c) 是我早上刚写的，难道几百行的代码就没了吗?git 里面有个特点，总有 后悔药，只要能找到这个 id，肯定就能将数据恢复过来。12$ git stash pop 534cb702c00f36afd4297e6328557cabead9600c'534cb702c00f36afd4297e6328557cabead9600c' is not a stash reference不料行不通！1$ git stash apply 534cb702c00f36afd4297e6328557cabead9600c果然药到病除！从这里也发现 git stash pop 和 git stash apply 是稍微有点区别的，如果 stash-list 里面包含了这个 commit 用法是一样的，否则 apply 可以将不在 stash-list 中的代码恢复到工作区。]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[go版本Excel导入脚本]]></title>
    <url>%2Fp%2Fb6cc.html</url>
    <content type="text"><![CDATA[一直挺想用 go 的，但是没想到能干啥，前段时间正好有个任务导入 Excel 到后台数据库，用 Python 的话我可能分分钟就写好了，但是作死的我就想试下 go，因为 go 可以打包成可执行程序包，然后就可以不依赖 go 的环境。直接编码使用 flag 获取终端参数解析123path := flag.String("path", "", "excel 路径")url := flag.String("url", "**", "服务器地址")flag.Parse()这里定义了 path 路径和服务器地址 url，唯一需要注意的是，这里变量返回都是指针。flag 有个好处，他的参数都是形如($key,$defaultValue,$description)，所以在执行 -h 的时候，都会返回 key 以及对应的 description。使用 Luxurioust/excelize 读取Excel文件123456789xlsx, err := excelize.OpenFile(*path)rows := xlsx.GetRows("Sheet1")for r, row := range rows &#123; fmt.Println(r) for c, col := range row &#123; fmt.Println(c) fmt.Println(col) &#125;&#125;这个包用起来还是很舒服，唯一一点只支持 xlsx 格式，对于老版本的 xls 格式可能需要先转化了才能使用。rows 为一个二维数组，参数为 sheet 名称，默认的名称都是 Sheet1使用自带的 net/http 发送请求1234567891011121314str, _ := json.Marshal(data)resp, err := http.Post(url, "application/json", strings.NewReader(string(str)))if err != nil &#123; fmt.Println(err)&#125;defer resp.Body.Close()body, err := ioutil.ReadAll(resp.Body)if err != nil &#123; fmt.Println(err) os.Exit(1)&#125;fmt.Println(string(body))go 自带的的 http 就是这么好用，post 形式发送了一个 json 包，这个 jsonEncode 用起来稍微有点不爽但是也还好。打包程序1$ go build main.go就可以将这个脚本打包成一个可执行文件了，但是发现文件还挺大的，我以为只有几百 k 呢，都 8m 多了压缩程序12$ brew install upx$ upx mainupx 是一个专门的压缩打包可执行文件的程序，可以优化包体积。这里压缩过的包不能使用了，暂时没有深究什么原因。所以寻找其他方式再次优化1$ go build -ldflags -w main.go发现这样弄就可以减少 1m 的体积，还是挺可观的，现在有一个可执行文件了，不用对方有 golang 环境，拿过去直接可以运行跑起来。go 就是优秀！参考Golang 读写 Excel压缩go build打包的可执行文件]]></content>
      <categories>
        <category>go</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[关于浏览器的强制刷新]]></title>
    <url>%2Fp%2F7a43.html</url>
    <content type="text"><![CDATA[经常出现浏览器将js缓存的问题Chrome 浏览器Windows：Shift+F5Linux: Ctrl+Shift+RMac OS: Cmd+Shft+RSafari浏览器Cmd+Option+R]]></content>
  </entry>
  <entry>
    <title><![CDATA[关于授权和认证]]></title>
    <url>%2Fp%2Fec56.html</url>
    <content type="text"><![CDATA[昨天看到一篇博客专门提到 认证 VS 授权 。名字不同，认证 （Authentication） 和 授权 （Authorization）认证需要输入用户名和密码，授权指需要授权服务提供给当前服务若干权限从而请求确认HTTP状态码中有 401 和 403 都表示无权访问当前资源，401 表示则表示没有「认证」，403 表示没有『授权』参考一分钟讲清楚 Authentication 和 Authorization]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Laravel中的队列执行过慢]]></title>
    <url>%2Fp%2Fa1bc.html</url>
    <content type="text"><![CDATA[本来不想水的，公司的白先生硬要我水一篇，那就简单记录一下。问题上周，系统出现了一个很要命的问题，后端用的 laravel 队列执行导表任务异常缓慢，以前几分钟就能出的报告，几个小时都没动静，因为业务需要，每次用户观看视频都需要计算一些非常耗时的任务。调研后来调查尝试也确实是这块出了问题，laravel 文档中介绍了队列的优先级，提到参数顺序的问题。1$ php artisan queue:work --queue=high,low--queue 为队列的名称，参数用 , 分割，排的越靠前优先级越高。所以将越耗时的任务的优先级设置越低，将位置设置越靠后就好了。小结所以如果系统中存在耗时任务，造成整个队列都被卡住，应该按预计的执行耗时排序，将越耗时的任务提到越靠后的位置，这样就可以解决执行时间较短的任务优先执行参考队列优先级]]></content>
      <categories>
        <category>laravel</category>
      </categories>
      <tags>
        <tag>queue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你真的会用postman吗]]></title>
    <url>%2Fp%2Fce3e.html</url>
    <content type="text"><![CDATA[postman 一个非常牛逼的 api 测试工具。如果仅仅是打个 api，还不如直接 curl 来的简单，所以这里提供一些高级的功能的参考。多级文件夹经常需要将 api 进行按功能模块进行分组，这种多级文件夹的形式正好可以满足我的需求，某个功能每个 api 一目了然。多种请求方法postman 有多达 15 种请求方法供选择，常用 GET、POST、PUT、DELET更是切换起来异常的方便。URL 参数拼接这里说的并不是简单的参数拼接 a=b&amp; 这种，而是比较高级的参数拼接1http://&#123;&#123;host&#125;&#125;/api/topics/:tid/replies/:rid然后在底下就可以补全 tid 和 rid 就可以了。Authorization授权可以通过常规的在请求 Headers 中添加 &quot;Authorization: balabala&quot;，但是 postman 更为方便的是有个专门的 Authorization 的 Tab，切换到这个 Tab 下面有多种通用的授权模式，譬如 Basic Auth 、Bearer Token 、OAuth 2.0 等，这里postman会自动添加相关信息到头或者 url 中。Manage Environment这个功能非常实用，相当于全局定义的常量。譬如线下环境的域名是 dev-api.zoulux.top ，线上环境的域名是 api.zoulux.top，那么这边新建两个 Environment ，分别配置 host 为上面域名，然后在所有的接口上就可以实用如下方式：1http://&#123;&#123;host&#125;&#125;/api/topics/:tid/replies/:rid很简单的就可以切换线上线下环境了，不仅可以配置 host ，很多公司线上线下接口的 secret 也不一样，都可以在不同的 Environment 中配置。Pre-request Script如果上面定义的是全局常量，那么这里可以说是可以定义局部变量，注意这里说的是「可以」，所以功能肯定远远不止如此，此处的 Script 是一个 JavaScript 脚本。变量譬如后端要求前端每次打接口将本地的 timestamp 拼接到接口里面接口里面12ts=new Date().getTime();pm.environment.set("timestamp", ts);pm 是 postman 提供的全局变量，可以用于设置局部变量，那么在 Params 的 Tab 下面就可以直接使用 timestamp 变量1timestamp : &#123;&#123;timestamp&#125;&#125;加密在对接百家云的时候，他们的接口是需要签名的，接口规则还蛮复杂，这里需要接口按 key 排序，还需要加密，这里是 js 的脚本，排序就用原生的 js 就能完成，但是还需要对 md5 加密，这就为难我胖虎了，不过 postman 早就考虑到加密的情况，所以默认已经引入了一些常用 package，CryptoJS中有丰富加密方法。Tests这个模块可以对接口的进行测试，譬如123pm.test("Status code is 200", function () &#123; pm.response.to.have.status(200);&#125;);可以查看接口返回的 status 是否是 200 。api文档在左侧的工程目录上右键选择 Publish Docs，会弹出一个网页，点过去就可以看到一个很精美的api文档，如果平时注意多注释，文档里面都会显示出来，更加优秀的是这个api文档是实时更新的，有新的api的时候刷新就可以看到了。more其实 postman 还有很多优秀的功能，值得我去探究。参考百家云接口签名Commonly used libraries and utilities]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>postman</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[视频日志记录]]></title>
    <url>%2Fp%2F1b7c.html</url>
    <content type="text"><![CDATA[视频记录是一件很麻烦的事情，之前是将一段视频十等分，学生每看完其中的一等分，在用户做相关操作的时候就会上传其中的几等分视频记录，相关操作包括：暂停视频观看下节视频拖动视频关闭当前页面调查调查了一下几个视频网站的记录方式，如下：优酷log 接口 ： http://yt1.mmstat.com/yt/vp.vtslog发送频率： 5 秒body 日志 ：123456789101112131415161718192021version: 0.5.78vid: 969664681uid: type: h5cf: 0cpt: 2full: 0pc: 0clb: 0playersid: 15408798967661cr1pik5u2fq2bZZx0WzQhD9abtest: bclientid: 125272a7921189a8iku: 125272a7921189a8sn: 1pt: 5hi: 5vvid: 8004d7c2ba930b672821e47ccf0bb8b7lang: 1r: 756681157cna: RSZYFOyl3CYCAWVR4r76Xbocspeed: 1腾讯视频log 接口 ： https://apd-be31beb59d7da6eff28fb4bb69f24c0d.v.smtcdns.com/varietyts.tc.qq.com发送频率： 不定时发送，打包一起发送body 日志 ：123456index: 23start: 241560end: 251560brs: 24702636bre: 25256859ver: 4Bilibililog 接口 ： https://api.bilibili.com/x/report/web/heartbeat发送频率： 15 秒body 日志 ：12345678910aid: 34926550cid: 61188917mid: csrf: played_time: 139realtime: 139start_ts: 1540881600type: 3dt: 2play_type: 0爱奇艺log 接口 ： https://sb.scorecardresearch.com/p发送频率： 10 秒body 日志：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879c1: 2c2: 26181340ns_type: hiddenns_st_sv: 6.1.0.170130ns_st_smv: 5.8ns_st_it: rns_st_id: 1540882415279ns_st_ec: 2ns_st_sp: 1ns_st_sc: 1ns_st_psq: 1ns_st_asq: 1ns_st_sq: 1ns_st_ppc: 1ns_st_apc: 1ns_st_spc: 1ns_st_cn: 1ns_st_ev: pausens_st_po: 86868ns_st_cl: 5997951ns_st_mp: js_apins_st_mv: 6.1.0.170130ns_st_pn: 1ns_st_tp: 0ns_st_ci: 1462694600ns_st_pt: 86868ns_st_dpt: 86868ns_st_ipt: 26853ns_st_et: 86868ns_st_det: 86868ns_st_upc: 86868ns_st_dupc: 86868ns_st_iupc: 26853ns_st_upa: 86868ns_st_dupa: 86868ns_st_iupa: 26853ns_st_lpc: 86868ns_st_dlpc: 86868ns_st_lpa: 86868ns_st_dlpa: 86868ns_st_pa: 86868ns_ts: 1540882532281ns_st_bc: 0ns_st_dbc: 0ns_st_bt: 0ns_st_dbt: 0ns_st_bp: 0ns_st_skc: 0ns_st_dskc: 0ns_st_ska: 0ns_st_dska: 0ns_st_skd: 0ns_st_skt: 0ns_st_dskt: 0ns_st_pc: 1ns_st_dpc: 1ns_st_pp: 1ns_st_br: 0ns_st_rt: 100ns_st_ub: 0ns_st_ki: 1200000ns_st_pr: 声林之王之林宥嘉萧敬腾1对1指导学员 巫启贤女儿唱约翰丹佛名作ns_st_sn: *nullns_st_en: 1ns_st_ep: 声林之王之林宥嘉萧敬腾1对1指导学员 巫启贤女儿唱约翰丹佛名作ns_st_ct: vc12ns_st_ge: 港台,音乐,真人秀ns_st_st: iqiyins_st_ce: 1ns_st_ia: 0ns_st_ddt: *nullns_st_tdt: *nullns_st_pu: *nullc3: *nullc4: 6c6: *nullc7: https://www.iqiyi.com/v_19rr6haox0.htmlc8: 声林之王之林宥嘉萧敬腾1对1指导学员 巫启贤女儿唱约翰丹佛名作-综艺-高清正版视频在线观看–爱奇艺c9: https://www.iqiyi.com/小结定时日志上述的几个平台中除了 爱奇艺 传的数据太多，其他都很精简，总结一下关键信息我准备设计成如下几个字段：视频id当前用户id定时上传次数 index随机数 random视频开始位置视频结束位置开始时间戳结束时间戳播放倍速播放设备平台日志类型 ：timing日志包整理好了，就看日志日志发送频率了，除了腾讯视频 应该是有专门收集日志，有个统一的触发机制，一次性发送了多条日志，其他网站都是以单位时间的频率发送给服务端，考虑到实施的简便性，综合几个发送频率，暂定频率为 10 秒。随机数 random 每次打开视频都刷新，可以区分不同的 log 的日志链，定时上传次数 index 可以检查一段 log 的完整性。我们的单个视频平均时长在15分钟,那么如果有一次发送log日志失败对总体进度影响是1215 * 60 =900 s10 / 900 = 0.011111111 = 1.11%为了一次日志失败对总体进度的影响，所以频率确定为 5 秒，但是相对来说，数据库的需要的储存空间也需要扩大一倍1215 * 60 =900 s5 / 900 = 0.005555556 = 0.56%单条数据丢失对整体影响也直接降低一半。操作日志上面的几家平台都有做操作日志的记录，这里唯一添加一个 random 字段，取值和定时日志每次生成的随机值相同，这里操作日志分为以下几类开始视频id当前用户id随机数 random时间戳视频位置播放设备平台日志类型 ：start暂停视频id当前用户id随机数 random时间戳视频位置播放设备平台日志类型 ：pause完成视频id当前用户id随机数 random时间戳视频位置播放设备平台日志类型 ：complete退出视频id当前用户id随机数 random时间戳视频位置播放设备平台日志类型 ：exit拖动视频id当前用户id随机数 random视频原有位置视频现有位置时间戳播放设备平台日志类型 ：drag倍速视频id当前用户id随机数 random视频原有倍速视频现有倍速时间戳视频位置播放设备平台日志类型 ：speed实施客户端每次将日志发送到服务端如果成功，则本次日志提交结束如果失败，则客户端需要将日志存储在本地等待时机合适，重新提交日志如果成功，删除本地存储日志，本次日志提交结束如果失败，重复第 4 步]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac上几个有趣的命令（一）]]></title>
    <url>%2Fp%2Fa074.html</url>
    <content type="text"><![CDATA[首先我是一个 Mac 党，但是对于 Linux 也尤为喜爱，他们上面有那么一些命令总是那么饶有趣味，又由于都是类 Unix 系统，很多命令都是通用的，本文的代码也都是在 Mac 上面完成curl一个大名鼎鼎的命令，作为一个程序员，如果 curl 都不知道，那就真的很尴尬，主要是做网络请求直接返回下载文件内容到终端1$ curl baidu.com123&lt;html&gt;&lt;meta http-equiv="refresh" content="0;url=http://www.baidu.com/"&gt;&lt;/html&gt;下载文件到指定文件12$ curl baidu.com -o baidu.html$ cat baidu.html123&lt;html&gt;&lt;meta http-equiv="refresh" content="0;url=http://www.baidu.com/"&gt;&lt;/html&gt;下载文件到默认文件123$ curl https://nodejs.org/dist/v8.12.0/node-v8.12.0.pkg -O$ ls node-v8.12.0.pkgnode-v8.12.0.pkg查看返回头信息1$ curl -i baidu.com12345678910111213141516HTTP/1.1 200 OKDate: Sat, 20 Oct 2018 14:30:47 GMTServer: ApacheLast-Modified: Tue, 12 Jan 2010 13:48:00 GMTETag: &quot;51-47cf7e6ee8400&quot;Accept-Ranges: bytesContent-Length: 81Cache-Control: max-age=86400Expires: Sun, 21 Oct 2018 14:30:47 GMTConnection: Keep-AliveContent-Type: text/htmlProxy-Connection: keep-alive&lt;html&gt;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://www.baidu.com/&quot;&gt;&lt;/html&gt;查看请求的整个过程1$ curl -v baidu.com12345678910111213141516171819202122232425* Rebuilt URL to: baidu.com/* Trying 123.125.115.110...* TCP_NODELAY set* Connected to baidu.com (123.125.115.110) port 80 (#0)&gt; GET / HTTP/1.1&gt; Host: baidu.com&gt; User-Agent: curl/7.54.0&gt; Accept: */*&gt; &lt; HTTP/1.1 200 OK&lt; Date: Sat, 20 Oct 2018 14:40:22 GMT&lt; Server: Apache&lt; Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT&lt; ETag: &quot;51-47cf7e6ee8400&quot;&lt; Accept-Ranges: bytes&lt; Content-Length: 81&lt; Cache-Control: max-age=86400&lt; Expires: Sun, 21 Oct 2018 14:40:22 GMT&lt; Connection: Keep-Alive&lt; Content-Type: text/html&lt; &lt;html&gt;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://www.baidu.com/&quot;&gt;&lt;/html&gt;* Connection #0 to host baidu.com left intact发送 Post 请求不带参数1$ curl -X POST baidu.comform形式将以 Content-Type: application/x-www-form-urlencoded 形式提交1$ curl -X POST -d 'a=b' baidu.comjson形式将以 Content-Type: application/json 形式提交1$ curl -X POST baidu.com -H 'content-type: application/json' -d '&#123;"a":"b"&#125;'发送其他 method 请求如果你们公司也在用 restful api ，很幸运的是 curl 会是一个好帮手1234$ curl -X GET baidu.com$ curl -X POST baidu.com$ curl -X PUT baidu.com$ curl -X DELETE baidu.com发送带自定义 header 请求1$ curl -X POST -H 'custom-key: custom-value' baidu.com查看当前 ip这算是一个非常实用的技巧了，因为我这里开了代理，所以网络 ip 显示的是美国12$ curl ip.cn当前 IP：138.128.193.*** 来自：美国pingping(packet internet groper)通过发送icmp(internet control messages protocol)协议包查看当前机器和目标机器的连通性，mac上面如果不指定 ping 次数，则会一直执行1$ ping baidu.comctrl-c 强行停止1234567PING baidu.com (123.125.115.110): 56 data bytes64 bytes from 123.125.115.110: icmp_seq=0 ttl=55 time=111.843 ms64 bytes from 123.125.115.110: icmp_seq=1 ttl=55 time=113.706 ms64 bytes from 123.125.115.110: icmp_seq=2 ttl=55 time=26.261 ms64 bytes from 123.125.115.110: icmp_seq=3 ttl=55 time=25.522 ms64 bytes from 123.125.115.110: icmp_seq=4 ttl=55 time=26.935 ms...通过 -c 指定执行次数1$ ping -c3 baidu.com12345678PING baidu.com (123.125.115.110): 56 data bytes64 bytes from 123.125.115.110: icmp_seq=0 ttl=55 time=232.282 ms64 bytes from 123.125.115.110: icmp_seq=1 ttl=55 time=44.364 ms64 bytes from 123.125.115.110: icmp_seq=2 ttl=55 time=38.667 ms--- baidu.com ping statistics ---3 packets transmitted, 3 packets received, 0.0% packet lossround-trip min/avg/max/stddev = 38.667/105.104/232.282/89.958 ms执行结束会一段对本次所以请求的汇报，发送了多少次包，多少返回了，多少丢失了，round-trip time 时间 最短/平均/最长/标准差traceroutetraceroute 其实也是发送 icmp 协议报文查看到达目标 ip 中间经过所有的路由信息1$ traceroute www.baidu.com结果如下123456traceroute: Warning: www.baidu.com has multiple addresses; using 61.135.169.121traceroute to www.a.shifen.com (61.135.169.121), 64 hops max, 52 byte packets 1 * * * 2 * * * 3 * * * 4 * * *尴尬的是后面直接星号了，因为大多数网关都禁止对 icmp 报文作出响应]]></content>
      <categories>
        <category>开发笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[定制博客]]></title>
    <url>%2Fp%2F4e.html</url>
    <content type="text"><![CDATA[虽然默认的 next 主题已经很美了，但是网上有一堆对 next 进行定制的教程，本着优雅不炫技的原则，我对博客作了以下简单的优化：添加 hexo-admin 插件hexo-admin 为一套hexo 博客管理工具，我准备将博客的开发环境也部署到服务器上，这样就不用开本地环境，有了它就可以在线编辑博客了，非常方便。安装依赖库1$ npm install --save hexo-admin启动本地博客，并在浏览器打开12$ hexo s $ open http://localhost:4000/admin如果不出错的话 admin 界面就已经展现在眼前，但是很多时候想配置账户密码去登录到这个管理后台，就需要接着配置在 admin 的界面 ,前往Settings &gt;Setup authentification 可以看到Username,Password,Secret ，输入自己心仪的账户密码以及秘钥，拷贝 hexo-admin authentification 下的内容在博客根目录下的 _config.yml 最底下粘贴如下配置1234admin: username: admin password_hash: $2a$10$L.XAIqIWgTc5S1zpvV3MEu7/rH34p4Is/nq824smv8EZ3lIPCp1su secret: wobuhuigaosunide重新执行第 2 步，发现这时候已经需要登录，输入配置中的账号和密码即可添加 分类 和 标签每篇文章可以有一个分类和多个标签，这也是分类和标签的最大的区别。创建 分类 选项生成 分类 页并添加属性type1$ hexo new page categories找到上面提示的 index.md 文件路径 ，打开发现是这样1234---title: categoriesdate: 2018-10-17 00:33:17---将其修改为12345---title: 分类date: 2018-10-17 00:33:17type: "categories"---博客根目录下依次打开 source &gt;_post 找一篇博客打开，顶部有一些文章的配置信息，为 categories 字段添加属性123456title: Hello Worldabbrlink: 3eebtags: []categories: 随笔date: 2018-10-15 16:27:00---一篇文章只有一个分类，如果需要二级分类的话可以如下修改，可以参考hexo 分类和标签12345678title: Hello Worldabbrlink: 3eebtags: []categories: - web开发- rubydate: 2018-10-15 16:27:00---创建 标签 选项生成 标签 页并添加属性type1$ hexo new page tags找到上面提示的 index.md 文件路径 ，打开发现是这样1234---title: tagsdate: 2018-10-20 14:33:17---将其修改为12345---title: 标签date: 2018-10-20 14:33:17type: "tags"---博客根目录下依次打开 source &gt;_post 找一篇博客打开，顶部有一些文章的配置信息，为 tags 字段添加属性123456789title: Hello Worldabbrlink: 3eebtags: - hexo - hexo-admincategories: - 随笔date: 2018-10-15 16:27:00---打开上面的文章底部，就可以看到标签添加加载进度条修改 pace: true 并设置自己喜欢的 pace_theme，可以每个都测试一下12pace: truepace_theme: pace-theme-flash添加赞赏修改自己的微信或者支付宝的图片12345# Rewardreward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！#wechatpay: /images/wechatpay.jpgalipay: /images/alipay.png#bitcoin: /images/bitcoin.png但是打开发现赞赏的按钮上面的文字是 Donate,看着很奇怪，编辑 themes/next/layout/_macro/reward.swig 文件中第 4 行，将 Donate 修改为 赏首页文章添加阅读全文阅读原文有两种方法可以实现，一种是自动，根据文字长度自动切割，另一种是手动的，添加 more 标签，则此标签以下就会被隐藏掉自动，编辑 _config.yml，指定文字长度，默认是150123auto_excerpt:enable: truelength: 150手动，打开任意文章，在文章的任意行插入 &lt;!-- more --&gt; 观察效果]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[自定义GitHubPages的域名]]></title>
    <url>%2Fp%2Fa916.html</url>
    <content type="text"><![CDATA[今天在配置 githubpages 自定义域名的时候怎么也连不通，通过搜素发现需要在 git 项目根目录下setting，配置Custom domain为自己的自定义域名，这时 github 配置了一个临时的CNAME。1hexo d重新部署之后，github 又会将Custom domain置为空，所以找到最终结局方法，在 hexo 项目的source目录下添加 CNAME 的文件，文件内容为自定义的域名：如 blog.zoulux.top]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何优雅的删除git子模块]]></title>
    <url>%2Fp%2Fb63b.html</url>
    <content type="text"><![CDATA[git submodule deinit $mod // 逆初始化git rm –cached $mode // 删除子模块缓存信息git commit -am “Remove a $mode.” // 提交更改]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fp%2F3eeb.html</url>
    <content type="text"><![CDATA[Welcome欢迎来到我的博客，希望我能勤快点，每周一更！每学一门新语言的时候，我们总是希望能在控制台中快速输出Hello world，这次也不理外。世界，你好，我来了！业精于勤荒于嬉，行成于思毁于随。共勉！]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
</search>
